---
- name: "Check if GNOME is installed (Arch)"
  ansible.builtin.command:
    cmd: "pacman -Q gnome-shell"
  register: gnome_installed
  changed_when: false
  failed_when: gnome_installed.rc != 0

- name: "Check if GNOME session is running"
  ansible.builtin.shell:
    cmd: "echo $XDG_CURRENT_DESKTOP"
  register: gnome_running
  changed_when: false
  failed_when: false
  when: gnome_installed.rc == 0

# DEBUG
- name: "Show GNOME session status"
  ansible.builtin.debug:
    msg: "GNOME session is currently running!"
  when: gnome_running

- name: "Ensure GNOME Tweaks is installed (Arch)"
  ansible.builtin.pacman:
    name: gnome-tweaks
    state: present
  become: true
  register: gnome_tweaks_result
  changed_when: gnome_tweaks_result.changed
  failed_when: gnome_tweaks_result.failed



# Check if fonts are installed, can not set fonts if not installed!
# Needed if tag gnome-postinstall is runned without the fonts tag!
- name: "Check and Apply GNOME Font Settings"
  block:
    - name: "Check if SFMono Nerd Font is installed"
      ansible.builtin.stat:
        path: "~/.local/share/fonts/LigaSFMonoNerdFont-Regular.otf"
      register: sfmono_installed
      when: sfmono_installed is not defined

    - name: "Check if Apple Fonts are installed"
      ansible.builtin.stat:
        path: "~/.cache/yay/otf-apple-fonts/src/SF-Pro-Text-Medium.otf"
      register: apple_fonts_installed
      when: apple_fonts_installed is not defined

    - name: "Abort if required fonts are missing"
      ansible.builtin.fail:
        msg: "SFMono Nerd Font or Apple Fonts are missing! Run the fonts installation task first."
      when: not sfmono_installed.stat.exists or not apple_fonts_installed.stat.exists

    - name: "Set fonts and apply font tweaks"
      block:
        - name: "Set GNOME UI font"
          ansible.builtin.command:
            cmd: "gsettings set org.gnome.desktop.interface font-name 'SF Pro Text 11'"

        - name: "Set GNOME document font"
          ansible.builtin.command:
            cmd: "gsettings set org.gnome.desktop.interface document-font-name 'SF Pro Text 11'"

        - name: "Set GNOME monospace font"
          ansible.builtin.command:
            cmd: "gsettings set org.gnome.desktop.interface monospace-font-name 'Liga SFMono Nerd Font 11'"

        - name: "Disable font hinting (GNOME Tweaks)"
          ansible.builtin.command:
            cmd: "gsettings set org.gnome.desktop.interface font-hinting 'none'"

        - name: "Set font antialiasing to subpixel (GNOME Tweaks)"
          ansible.builtin.command:
            cmd: "gsettings set org.gnome.desktop.interface font-antialiasing 'rgba'"
      when: 
        - gnome_installed.rc == 0
        - gnome_running.rc == 0
        - sfmono_installed.stat.exists
        - apple_fonts_installed.stat.exists
        - gnome_tweaks_result is not failed

- name: "Install and Configure Kora Icon Theme"
  block:
    - name: "Check if Kora Icon Theme is installed"
      ansible.builtin.command:
        cmd: "pacman -Q kora-icon-theme"
      register: kora_installed
      changed_when: false
      failed_when: false

    - name: "Check if Kora Icon Theme is already set"
      ansible.builtin.command:
        cmd: "gsettings get org.gnome.desktop.interface icon-theme"
      register: current_icon_theme
      changed_when: false
      failed_when: false

    - name: "Skip installation if Kora Icon Theme is already set"
      ansible.builtin.debug:
        msg: "Kora Icon Theme is already set and installed, skipping installation!"
      when:
        - kora_installed.rc == 0
        - "'kora' in current_icon_theme.stdout"
      changed_when: false

    - name: "Install Kora Icon Theme (if needed)"
      ansible.builtin.pacman:
        name: kora-icon-theme
        state: present
      become: true
      when:
        - kora_installed.rc != 0

    - name: "Set Kora Icon Theme as default (GNOME)"
      ansible.builtin.command:
        cmd: "gsettings set org.gnome.desktop.interface icon-theme 'kora'"
      when:
        - kora_installed.rc != 0 or "'kora' not in current_icon_theme.stdout"
  when:
    - gnome_running.rc == 0

- name: "Install and Configure Apple Cursor"
  block:
    - name: "Check if apple_cursor is installed"
      ansible.builtin.command:
        cmd: "pacman -Q apple_cursor"
      register: apple_cursor_installed
      changed_when: false
      failed_when: false

    - name: "Check if Apple Cursor is already set"
      ansible.builtin.command:
        cmd: "gsettings get org.gnome.desktop.interface cursor-theme"
      register: current_cursor
      changed_when: false
      failed_when: false

    - name: "Skip installation if Apple Cursor is already set"
      ansible.builtin.debug:
        msg: "Apple Cursor is already set and installed, skipping installation!"
      when:
        - apple_cursor_installed.rc == 0
        - "'MacOs' in current_cursor.stdout"
      changed_when: false

    - name: "Install Apple Cursor using yay (if needed)"
      ansible.builtin.command:
        cmd: "yay -S --noconfirm apple_cursor"
      when:
        - apple_cursor_installed.rc != 0
      become: false

    - name: "Set Apple Cursor as default (GNOME)"
      ansible.builtin.command:
        cmd: "gsettings set org.gnome.desktop.interface cursor-theme 'MacOs'"
      when:
        - apple_cursor_installed.rc != 0 or "'MacOs' not in current_cursor.stdout"

    - name: "Ensure cursor theme is set in XDG config"
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.Xresources"
        line: "Xcursor.theme: MacOs"
        create: yes
      when:
        - apple_cursor_installed.rc != 0 or "'MacOs' not in current_cursor.stdout"

    - name: "Reload Xresources"
      ansible.builtin.command:
        cmd: "xrdb -merge ~/.Xresources"
      changed_when: false
      when:
        - apple_cursor_installed.rc != 0 or "'MacOs' not in current_cursor.stdout"
  when:
    - gnome_running.rc == 0

- name: "Configure GNOME Window Settings"
  block:
    - name: "Check current GNOME button layout"
      ansible.builtin.command:
        cmd: "gsettings get org.gnome.desktop.wm.preferences button-layout"
      register: current_button_layout
      changed_when: false
      failed_when: false

    - name: "Check if new windows centering is enabled"
      ansible.builtin.command:
        cmd: "gsettings get org.gnome.mutter center-new-windows"
      register: current_window_centering
      changed_when: false
      failed_when: false

    - name: "Skip if GNOME window settings are already set"
      ansible.builtin.debug:
        msg: "GNOME window settings are already configured, skipping!"
      when:
        - "'appmenu:minimize,maximize,close' in current_button_layout.stdout"
        - "'true' in current_window_centering.stdout"
      changed_when: false

    - name: "Set GNOME window button layout"
      ansible.builtin.command:
        cmd: "gsettings set org.gnome.desktop.wm.preferences button-layout 'appmenu:minimize,maximize,close'"
      when:
        - "'appmenu:minimize,maximize,close' not in current_button_layout.stdout"

    - name: "Enable new window centering in GNOME"
      ansible.builtin.command:
        cmd: "gsettings set org.gnome.mutter center-new-windows true"
      when:
        - "'true' not in current_window_centering.stdout"
  when:
    - gnome_running.rc == 0

- name: "Install and Manage GNOME Extensions"
  block:
    - name: "Check if gnome-extensions-cli is installed"
      ansible.builtin.command:
        cmd: "pacman -Q gnome-extensions-cli"
      register: gext_installed
      changed_when: false
      failed_when: false

    - name: "Install gnome-extensions-cli using yay (if needed)"
      ansible.builtin.command:
        cmd: "yay -S --noconfirm gnome-extensions-cli"
      when: gext_installed.rc != 0
      become: false

    - name: "Define list of GNOME extensions to install"
      set_fact:
        gnome_extensions:
          - Airpod-Battery-Monitor@maniacx.github.com
          - autohide-battery@sitnik.ru
          - bluetooth-quick-connect@bjarosze.gmail.com
          - caffeine@patapon.info
          - clipboard-indicator@tudmotu.com
          - clipqr@drien.com
          - CoverflowAltTab@palatis.blogspot.com
          - dash-to-dock@micxgx.gmail.com
          - ddterm@amezin.github.com
          - dual-monitor-toggle@poka
          - just-perfection-desktop@just-perfection
          - lockkeys@vaina.lt
          - quick-settings-audio-panel@rayzeq.github.io
          - tailscale@joaophi.github.com
          - tiling-assistant@leleat-on-github
          - Vitals@CoreCoding.com
          - wifiqrcode@glerro.pm.me

    - name: "Check already installed GNOME extensions"
      ansible.builtin.command:
        cmd: "gext list -a"
      register: installed_extensions
      changed_when: false
      failed_when: false

    - name: "Install missing GNOME extensions"
      ansible.builtin.command:
        cmd: "gext install {{ item }}"
      loop: "{{ gnome_extensions }}"
      when: "'{{ item }}' not in installed_extensions.stdout"
      changed_when: false

    - name: "Enable GNOME extensions"
      ansible.builtin.command:
        cmd: "gext enable {{ item }}"
      loop: "{{ gnome_extensions }}"
      changed_when: false
      when: "'{{ item }}' in installed_extensions.stdout"

    - name: "Update all GNOME extensions"
      ansible.builtin.command:
        cmd: "gext update --yes"
      changed_when: false
      when: gext_installed.rc == 0
  when:
    - gnome_running.rc == 0
